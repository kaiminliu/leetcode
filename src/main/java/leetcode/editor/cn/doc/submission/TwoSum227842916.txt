    class Solution {
        public int[] twoSum(int[] nums, int target) {
            //输入：nums = [2,7,11,15], target = 9
            //输出：[0,1]
            //解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。

            // 我的思路：外层遍历：遍历nums数组，（通过 算出需要的值value = target-num[i]），内层遍历：再次遍历如果有与value相同的就返回
            // 时间复杂度 O(n^2)
            int value;
            int len = nums.length;
            int[] result = {};
            boolean flag = false; // 是否满足设置result条件
            // 外层循环，遍历nums
            for (int i = 0; i < len; i++) {
                value = target - nums[i];
                for (int j = i; j < len; j++) {
                    if (value == nums[j]) {
                        result = new int[]{i,j};
                        flag = true;
                    }
                }
                if (flag){
                    break;
                }
            }
            return result;
        }
    }

//total_testcases:57
//total_correct:52
//input_formatted:[3,2,4]
6
//expected_output:[1,2]
//code_output:[0,0]
